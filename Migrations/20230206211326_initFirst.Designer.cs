// <auto-generated />
using System;
using HallManagementTest2.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HallManagementTest2.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230206211326_initFirst")]
    partial class initFirst
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("HallManagementTest2.Models.ChiefHallAdmin", b =>
                {
                    b.Property<Guid>("ChiefHallAdminId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccessToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("Mobile")
                        .HasColumnType("bigint");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("ProfileImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TokenCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TokenExpires")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ChiefHallAdminId");

                    b.ToTable("ChiefHallAdmins");
                });

            modelBuilder.Entity("HallManagementTest2.Models.Hall", b =>
                {
                    b.Property<Guid>("HallId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AvailableRooms")
                        .HasColumnType("int");

                    b.Property<Guid>("HallAdminId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("HallTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsFull")
                        .HasColumnType("bit");

                    b.Property<int>("RoomCount")
                        .HasColumnType("int");

                    b.HasKey("HallId");

                    b.HasIndex("HallTypeId");

                    b.ToTable("Halls");
                });

            modelBuilder.Entity("HallManagementTest2.Models.HallAdmin", b =>
                {
                    b.Property<Guid>("HallAdminId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccessToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("HallId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("Mobile")
                        .HasColumnType("bigint");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("ProfileImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TokenCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TokenExpires")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("HallAdminId");

                    b.HasIndex("HallId")
                        .IsUnique();

                    b.ToTable("HallAdmins");
                });

            modelBuilder.Entity("HallManagementTest2.Models.HallType", b =>
                {
                    b.Property<Guid>("HallTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HallCount")
                        .HasColumnType("int");

                    b.Property<int>("RoomSpaceCount")
                        .HasColumnType("int");

                    b.HasKey("HallTypeId");

                    b.ToTable("HallTypes");
                });

            modelBuilder.Entity("HallManagementTest2.Models.Room", b =>
                {
                    b.Property<Guid>("RoomId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AvailableSpace")
                        .HasColumnType("int");

                    b.Property<Guid>("HallId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsFull")
                        .HasColumnType("bit");

                    b.Property<int>("MaxOccupants")
                        .HasColumnType("int");

                    b.Property<string>("RoomNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoomId");

                    b.HasIndex("HallId");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("HallManagementTest2.Models.Student", b =>
                {
                    b.Property<Guid>("StudentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccessToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Course")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Department")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("HallId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("Mobile")
                        .HasColumnType("bigint");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("ProfileImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("RoomId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("School")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StudyLevel")
                        .HasColumnType("int");

                    b.Property<DateTime>("TokenCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TokenExpires")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StudentId");

                    b.HasIndex("HallId");

                    b.HasIndex("RoomId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("HallManagementTest2.Models.StudentDevice", b =>
                {
                    b.Property<Guid>("StudentDeviceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("HallId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Item")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MatricNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SerialNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("StudentDeviceId");

                    b.HasIndex("HallId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentDevices");
                });

            modelBuilder.Entity("HallManagementTest2.Models.Hall", b =>
                {
                    b.HasOne("HallManagementTest2.Models.HallType", "HallType")
                        .WithMany("Halls")
                        .HasForeignKey("HallTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HallType");
                });

            modelBuilder.Entity("HallManagementTest2.Models.HallAdmin", b =>
                {
                    b.HasOne("HallManagementTest2.Models.Hall", "Hall")
                        .WithOne("HallAdmin")
                        .HasForeignKey("HallManagementTest2.Models.HallAdmin", "HallId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hall");
                });

            modelBuilder.Entity("HallManagementTest2.Models.Room", b =>
                {
                    b.HasOne("HallManagementTest2.Models.Hall", "Hall")
                        .WithMany("Rooms")
                        .HasForeignKey("HallId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hall");
                });

            modelBuilder.Entity("HallManagementTest2.Models.Student", b =>
                {
                    b.HasOne("HallManagementTest2.Models.Hall", "Hall")
                        .WithMany("Students")
                        .HasForeignKey("HallId");

                    b.HasOne("HallManagementTest2.Models.Room", "Room")
                        .WithMany("Students")
                        .HasForeignKey("RoomId");

                    b.Navigation("Hall");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("HallManagementTest2.Models.StudentDevice", b =>
                {
                    b.HasOne("HallManagementTest2.Models.Hall", "Hall")
                        .WithMany("StudentDevices")
                        .HasForeignKey("HallId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HallManagementTest2.Models.Student", "Student")
                        .WithMany("StudentDevices")
                        .HasForeignKey("StudentId");

                    b.Navigation("Hall");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("HallManagementTest2.Models.Hall", b =>
                {
                    b.Navigation("HallAdmin");

                    b.Navigation("Rooms");

                    b.Navigation("StudentDevices");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("HallManagementTest2.Models.HallType", b =>
                {
                    b.Navigation("Halls");
                });

            modelBuilder.Entity("HallManagementTest2.Models.Room", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("HallManagementTest2.Models.Student", b =>
                {
                    b.Navigation("StudentDevices");
                });
#pragma warning restore 612, 618
        }
    }
}
